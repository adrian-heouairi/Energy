enum Geometry = { SQUARE, HEXAGON }

Board
- List<List<Tile>> tiles
- Geometry geometry
- public Board(int width, int heigth, Geometry geometry) throws InvalidSizeException
- void addRowOnTop(), addRowAtBottom(), addColumnAtLeft(), addColumnAtRight() & the same for remove
- boolean isSolved()
- void shuffle() // Gives a random orientation to each tile and calls propagateEnergy()
- void propagateEnergy()
- private void turnOffEverything()
- private List<WifiComponent> getWifiComponents()

Tile
- List<Connector> connectors = 4 or 6 connectors according to geometry
- Component component
- Geometry geometry
- Board parentBoard
- int orientation between 0 and 3 or 0 and 5 according to geometry?
- enum Direction = { NORTH, NORTH_EAST, EAST, SOUTH_EAST, SOUTH, SOUTH_WEST, WEST, NORTH_WEST }
- public Tile(Geometry geometry)
- void cycleComponent() // Replaces the current component by one of the next type
- boolean toggleConnectorExists(Direction direction) // Toggles exists for the connector in the specified direction, returns true if the operation succeeded
- void rotateClockwise(boolean propagateEnergy) // Cycles neighbors for all connectors, then does "for each neighbor, neighbor.setNeighbor(connector)" then calls parentBoard.propagateEnergy() if propagateEnergy is true
- void rotateCounterClockwise(boolean propagateEnergy)
- void calculatePower() // May be added later

Connector
- boolean exists
- boolean isPowered
- Tile parentTile?
- Connector neighbor // null if the connector is facing outside

class Component
- protected Tile parentTile
- public boolean isPowered() // Returns true if one of the connectors is powered

EmptyComponent

LampComponent

SourceComponent
- @Override boolean isPowered() { return true; }

WifiComponent
- private boolean isPoweredByAnother
- @Override boolean isPowered() { return super.isPowered() || isPowerByAnother; }

Level
- final int levelNumber
- Board board
- State levelState
- enum State = { EDITING, PLAYING }
- boolean isSolved()
- boolean start() // Shuffles the board up to 100 times to put it a non-solved state, returns true if the board is non-solved at the end

====================

LevelConverter
- private static List<Tile> parseLine(String line)
- factory: public static Level fileToLevel(String path) throws IOException, InvalidLevelException
- public static void writeLevelToFile(Level level) throws IOException, InvalidLevelException
